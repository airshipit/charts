{{- define "deployment-controller" -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-pipelines-controller
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "helpers.labels.labels" (dict "Global" $ "Component" "controller" "PartOf" "tekton-pipelines") | nindent 4 }}
spec:
  replicas: {{ $.Values.controller.pod.replicas }}
  selector:
    matchLabels: {{- include "helpers.labels.matchLabels" (dict "Global" $ "Component" "controller" ) | nindent 6 }}
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      labels: {{- include "helpers.labels.labels" (dict "Global" $ "Component" "controller" "PartOf" "tekton-pipelines") | nindent 8 }}
    spec:
      serviceAccountName: tekton-pipelines-controller
      nodeSelector: {{- include "helpers.pod.node_selector" ( dict "Global" $ "Component" "controller" ) | nindent 8 }}
      containers:
      - name: tekton-pipelines-controller
        image: {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "controller" ) }}
        imagePullPolicy: {{ $.Values.images.pull.policy | quote }}
        args:
          # These images are built on-demand by `ko resolve` and are replaced
          # by image references by digest.
          - -kubeconfig-writer-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "kubeconfig_writer_image" ) }}
          - -git-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "git_image" ) }}
          - -entrypoint-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "entrypoint_image" ) }}
          - -nop-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "nop_image" ) }}
          - -imagedigest-exporter-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "imagedigest_exporter_image" ) }}
          - -pr-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "pr_image" ) }}
          - -build-gcs-fetcher-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "build_gcs_fetcher_image" ) }}
          - -gsutil-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "gsutil_image" ) }}
          - -shell-image
          - {{ include "helpers.pod.container.image" ( dict "Global" $ "Component" "shell_image" ) }}
        volumeMounts:
          - name: config-logging
            mountPath: /etc/config-logging
          - name: config-registry-cert
            mountPath: /etc/config-registry-cert
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
          # If you are changing these names, you will also need to update
          # the controller's Role in 200-role.yaml to include the new
          # values in the "configmaps" "get" rule.
        - name: CONFIG_DEFAULTS_NAME
          value: config-defaults
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: CONFIG_ARTIFACT_BUCKET_NAME
          value: config-artifact-bucket
        - name: CONFIG_ARTIFACT_PVC_NAME
          value: config-artifact-pvc
        - name: CONFIG_FEATURE_FLAGS_NAME
          value: feature-flags
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election
        - name: SSL_CERT_FILE
          value: /etc/config-registry-cert/cert
        - name: SSL_CERT_DIR
          value: /etc/ssl/certs
        - name: METRICS_DOMAIN
          value: {{ $.Values.controller.conf.metrics_domain }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 65532
          runAsGroup: 65532
          capabilities:
            drop:
              - all
        ports:
          - name: probes
            containerPort: {{ $.Values.controller.endpoints.ports.probes.port }}
        livenessProbe:
          httpGet:
            path: /health
            port: probes
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: probes
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: config-logging
        configMap:
          name: config-logging
      - name: config-registry-cert
        configMap:
          name: config-registry-cert
...
{{- end -}}
{{- include "helpers.template.overlay" ( dict "Global" $ "template_definition" "deployment-controller" ) }}
